Cleaning Merchants Table.
Number of unique merchants serving deals: 1901
merchants table
 |-- address: string (nullable = true)
 |-- country: string (nullable = true)
 |-- country_code: string (nullable = true)
 |-- id: long (nullable = true)
 |-- latitude: double (nullable = true)
 |-- locality: string (nullable = true)
 |-- longitude: double (nullable = true)
 |-- name: string (nullable = true)
 |-- phone_number: string (nullable = true)
 |-- postal_code: string (nullable = true)
 |-- region: string (nullable = true)
 |-- url: string (nullable = true)

Cleaning Dining-nightlife Table.
Number of unique dining-nightlife serving deals: 1929
dining-nightlife table
 |-- category: string (nullable = true)
 |-- created_at: string (nullable = true)
 |-- description: string (nullable = true)
 |-- discount_percentage: double (nullable = true)
 |-- expires_at: string (nullable = true)
 |-- fine_print: string (nullable = true)
 |-- id: long (nullable = true)
 |-- merchant_id: long (nullable = true)
 |-- number_sold: long (nullable = true)
 |-- online: boolean (nullable = true)
 |-- price: double (nullable = true)
 |-- provider_name: string (nullable = true)
 |-- sub_category: string (nullable = true)
 |-- title: string (nullable = true)
 |-- updated_at: string (nullable = true)
 |-- url: string (nullable = true)

Cleaning Activities-events Table.
Number of unique activities-events serving deals: 353
root
 |-- category: string (nullable = true)
 |-- created_at: string (nullable = true)
 |-- description: string (nullable = true)
 |-- discount_percentage: double (nullable = true)
 |-- expires_at: string (nullable = true)
 |-- fine_print: string (nullable = true)
 |-- id: long (nullable = true)
 |-- merchant_id: long (nullable = true)
 |-- number_sold: long (nullable = true)
 |-- online: boolean (nullable = true)
 |-- price: double (nullable = true)
 |-- provider_name: string (nullable = true)
 |-- sub_category: string (nullable = true)
 |-- title: string (nullable = true)
 |-- updated_at: string (nullable = true)
 |-- url: string (nullable = true)

Cleaning Product Table.
Number of unique product serving deals: 1710
root
 |-- category: string (nullable = true)
 |-- created_at: string (nullable = true)
 |-- description: string (nullable = true)
 |-- discount_percentage: double (nullable = true)
 |-- expires_at: string (nullable = true)
 |-- fine_print: string (nullable = true)
 |-- id: long (nullable = true)
 |-- merchant_id: long (nullable = true)
 |-- number_sold: long (nullable = true)
 |-- online: boolean (nullable = true)
 |-- price: double (nullable = true)
 |-- provider_name: string (nullable = true)
 |-- sub_category: string (nullable = true)
 |-- title: string (nullable = true)
 |-- updated_at: string (nullable = true)
 |-- url: string (nullable = true)
 
 
 
 create table activities_events (id bigint, merchant_id bigint, provider_name text, title text, category text, sub_category text, description text, fine_print text, price float, discount_percentage float, number_sold bigint, created_at text, expires_at text, updated_at text, url text, online boolean, PRIMARY KEY (id, updated_at));
 

TABLES SCHEMA
create table activities_events (id bigint, merchant_id bigint, provider text, title text, category text, sub_category text, description text, fine_print text, price float, percentage_disc float, number_sold int, created_at timestamp, expires_at timestamp, updated_at timestamp, url text, online boolean, PRIMARY KEY (id,updated_at));
cqlsh:deals> drop table products;
cqlsh:deals> create table products (id bigint, merchant_id bigint, provider text, title text, category text, sub_category text, description text, fine_print text, price float, percentage_disc float, number_sold int, created_at timestamp, expires_at timestamp, updated_at timestamp, url text, online boolean, PRIMARY KEY (id,updated_at));
cqlsh:deals> create table dining_nightlife (id bigint, merchant_id bigint, provider text, title text, category text, sub_category text,Welcome  description text, fine_print text, price float, percentage_disc float, number_sold int, created_at timestamp, expires_at timestamp, updated_at timestamp, url text, online boolean, PRIMARY KEY (id,updated_at));
cqlsh:deals> .schemas


create table wine-tasting (id bigint, merchant_id bigint, provider text, title text, category text, sub_category text, description text, fine_print text, price float, percentage_disc float, number_sold int, created_at timestamp, expires_at timestamp, updated_at timestamp, url text, online boolean, PRIMARY KEY (id,category,merchant_id,price,percentage_disc,number_soldupdated_at));



['adult', 'audio', 'automotive', 'beauty_health', 'crafts_hobbies', 'electronics', 'fashion_accessories', 'fitness_product', 'food_alcohol', 'gifts', 'home_goods', 'kitchen', 'luggage', 'mens_fashion', 'mobile', 'movies_music_games', 'office_supplies', 'tools', 'toys', 'women_fashion', 'baby', 'bridal', 'college', 'jewish', 'kids', 'kosher', 'pets', 'travel', 'automotive-services', 'food-grocery', 'home-services', 'mens-clothing', 'photography-services', 'treats', 'womens-clothing', 'chiropractic', 'dental', 'dermatology', 'eye-vision', 'facial', 'hair-removal', 'hair-salon', 'makeup', 'manicure-pedicure', 'massage', 'spa', 'tanning', 'teeth-whitening', 'bars-clubs', 'restaurants', 'boot-camp', 'fitness-classes', 'gym', 'martial-arts', 'personal-training', 'pilates', 'yoga', 'bowling', 'city-tours', 'comedy-clubs', 'concerts', 'dance-classes', 'golf', 'life-skills-classes', 'museums', 'outdoor-adventures', 'skiing', 'skydiving', 'sporting-events', 'theater', 'wine-tasting']

output = OrderedDict()
                output['id'] = deal['deal']['id']
                output['category'] = deal['deal']['category_slug']
                output['sub_category'] = deal['deal']['category_slug']
                output['title'] = deal['deal']['short_title']
                output['description'] = deal['deal']['description']
                output['fine_print'] = deal['deal']['fine_print']
                output['number_sold'] = deal['deal']['number_sold']
                output['url'] = deal['deal']['untracked_url']
                output['price'] = deal['deal']['price']
                output['discount_percentage'] = deal['deal']['discount_percentage']
                output['provider_name'] = deal['deal']['provider_name']
                output['online'] = deal['deal']['online']
                output['expires_at'] = deal['deal']['expires_at']
                output['created_at'] = deal['deal']['created_at']
                output['updated_at'] = deal['deal']['updated_at']
                output['merchant_id'] = deal['deal']['merchant']['id']

                # Online merchants have fields null. Change to ''
                # and then flatten merchant info
                merchant_info = deal['deal']['merchant']
                if not all(merchant_info.values()):
                    merchant_info = self._clean_merchant_info(merchant_info) 
                output['merchant_name'] = merchant_info['name']
                output['merchant_address'] = merchant_info['address']
                output['merchant_locality'] = merchant_info['locality']
                output['merchant_region'] = merchant_info['region']
                output['merchant_postal_code'] = merchant_info['postal_code']
                output['merchant_country'] = merchant_info['country']
                output['merchant_latitude'] = merchant_info['latitude']
                output['merchant_longitude'] = merchant_info['longitude']
                output['merchant_phone_number'] = merchant_info['phone_number']

create table merchants (id bigint, name text, address text, postal_code text, country text, phone_number text,  longitude double, latitude double,  url text, region text,  PRIMARY KEY (id));

NEW TABLE TO USE
create table wine_tasting (id bigint, merchant_id bigint, provider text, title text, category text, sub_category text, description text, fine_print text, price float, percentage_disc float, number_sold int, created_at timestamp, expires_at timestamp, updated_at timestamp, url text, online boolean, unique_deals set<bigint>, PRIMARY KEY ((category, price, percentage_disc, number_sold, merchant_id), updated_at, created_at, expires_at, online)) with clustering order by (updated_at desc);

QUERY TABLES FOR 
1. Find Query that belongs to a price range with discount and highest numbers sold.
trending_products_with_price
create table trending_products_with_price  (id bigint, merchant_id bigint, provider text, title text, category text, sub_category text, description text, fine_print text, price float, percentage_disc float, number_sold int, created_at timestamp, expires_at timestamp, updated_at timestamp, url text, online boolean, unique_deals set<bigint>, PRIMARY KEY ((sub_category, price, percentage_disc),  number_sold, category, merchant_id, updated_at, created_at, expires_at, online)) with clustering order by (number_sold desc);

create table trending_dinning_with_price  (id bigint, merchant_id bigint, provider text, title text, category text, sub_category text, description text, fine_print text, price float, percentage_disc float, number_sold int, created_at timestamp, expires_at timestamp, updated_at timestamp, url text, online boolean, unique_deals set<bigint>, PRIMARY KEY ((sub_category, price, percentage_disc),  number_sold, category, merchant_id, updated_at, created_at, expires_at, online)) with clustering order by (number_sold desc);

create table trending_events_with_price  (id bigint, merchant_id bigint, provider text, title text, category text, sub_category text, description text, fine_print text, price float, percentage_disc float, number_sold int, created_at timestamp, expires_at timestamp, updated_at timestamp, url text, online boolean, unique_deals set<bigint>, PRIMARY KEY ((sub_category, price, percentage_disc),  number_sold, category, merchant_id, updated_at, created_at, expires_at, online)) with clustering order by (number_sold desc);


2. Find deals where I can check the variance with price and percentage
events_with_price_manipulation
create table events_with_price_manipulation  (id bigint, merchant_id bigint, provider text, title text, category text, sub_category text, description text, fine_print text, price float, percentage_disc float, number_sold int, created_at timestamp, expires_at timestamp, updated_at timestamp, url text, online boolean, unique_deals set<bigint>, PRIMARY KEY ((price, percentage_disc),  number_sold, sub_category, category, merchant_id, updated_at, created_at, expires_at, online)) with clustering order by (number_sold desc);

3. Chepest Category Selection.
create table cheapest_category_selection  (id bigint, merchant_id bigint, provider text, title text, category text, sub_category text, description text, fine_print text, price float, percentage_disc float, number_sold int, created_at timestamp, expires_at timestamp, updated_at timestamp, url text, online boolean, unique_deals set<bigint>, PRIMARY KEY ((sub_category), price, percentage_disc, number_sold, category, merchant_id, updated_at, created_at, expires_at, online)) with clustering order by (price desc, percentage_disc desc);

create table products  (id bigint, merchant_id bigint, provider text, title text, category text, sub_category text, description text, fine_print text, price float, percentage_disc float, number_sold int, created_at timestamp, expires_at timestamp, updated_at timestamp, url text, online boolean, unique_deals set<bigint>, PRIMARY KEY ((category, sub_category, price, percentage_disc), number_sold, merchant_id, updated_at, created_at, expires_at, online)) with clustering order by (number_sold desc);

create table products  (id bigint, merchant_id bigint, provider text, title text, category text, sub_category text, description text, fine_print text, price float, discount_percentage float, number_sold int, created_at timestamp, expires_at timestamp, updated_at timestamp, url text, online boolean, PRIMARY KEY ((sub_category, price), discount_percentage, number_sold, category, merchant_id, updated_at, created_at, expires_at, online)) with clustering order by (discount_percentage desc);

create table activities_events  (id bigint, merchant_id bigint, provider text, title text, category text, sub_category text, description text, fine_print text, price float, discount_percentage float, number_sold int, created_at timestamp, expires_at timestamp, updated_at timestamp, url text, online boolean, PRIMARY KEY ((sub_category, price), discount_percentage, number_sold, category, merchant_id, updated_at, created_at, expires_at, online)) with clustering order by (discount_percentage desc);

create table dining_nightlife  (id bigint, merchant_id bigint, provider text, title text, category text, sub_category text, description text, fine_print text, price float, discount_percentage float, number_sold int, created_at timestamp, expires_at timestamp, updated_at timestamp, url text, online boolean, PRIMARY KEY ((sub_category, price), discount_percentage, number_sold, category, merchant_id, updated_at, created_at, expires_at, online)) with clustering order by (discount_percentage desc);

Query Find all deals where price matters
create table price_matters  (id bigint, merchant_id bigint, provider text, title text, category text, sub_category text, description text, fine_print text, price float, discount_percentage float, number_sold int, created_at timestamp, expires_at timestamp, updated_at timestamp, url text, online boolean, PRIMARY KEY ((price), discount_percentage, number_sold, sub_category, category, merchant_id, updated_at, created_at, expires_at, online)) with clustering order by (discount_percentage desc);

Query Find all deals where discount matters
create table disc_matters  (id bigint, merchant_id bigint, provider text, title text, category text, sub_category text, description text, fine_print text, price float, discount_percentage float, number_sold int, created_at timestamp, expires_at timestamp, updated_at timestamp, url text, online boolean, PRIMARY KEY ((discount_percentage), price, number_sold, sub_category, category, merchant_id, updated_at, created_at, expires_at, online)) with clustering order by (price asc);

create table category_disc_matters  (id bigint, merchant_id bigint, provider text, title text, category text, sub_category text, description text, fine_print text, price float, discount_percentage float, number_sold int, created_at timestamp, expires_at timestamp, updated_at timestamp, url text, online boolean, PRIMARY KEY ((sub_category, discount_percentage), price, number_sold, sub_category, category, merchant_id, updated_at, created_at, expires_at, online)) with clustering order by (price asc);

## TRENDING TABLE - For each minute, hour or so... what is the total count of user interaction with 
## these categories. All including Page visits, read description, and purchase. Affinity Score.
Score definition -
    Viewing = .1
    Favoriting = .5
    Purchase = 1

## USER and CATEGORY DRIVEN QUERIES
    - Get user by user id
    - Get item by item id
    - Get all the items that a particular user likes
    - Get all the users who like a particular item
TABLE DEFINITIONS
1. CREATE TABLE users (time_of_creation timeuuid, full_name text, latitude double, longitude double, PRIMARY KEY((full_name), time_of_creation, latitude, longitude));

2. CREATE TABLE categories(id uuid, name text, PRIMARY KEY(name));
3. CREATE TABLE category_by_parent (id uuid, parent text, category text, PRIMARY KEY (parent, category));
4. CREATE TABLE users_by_category (datetime timeuuid, user text, category text, PRIMARY KEY((user), datetime,  category));
5. CREATE TABLE category_by_user (datetime timeuuid, user text, category text, PRIMARY KEY (category), datetime,  user);
6. CREATE TABLE trending_categories_by_time (datetime timeuuid, category text, count bigint, PRIMARY KEY ((category), datetime, count)) with clustering order by (datetime desc);
Algorithm - 
    1. For each user, calculate the affinity score of a category
    2. User can only have 1 if already have .5 and .1
    3. User can only have .5 if already have .1
    4. Every one gets a .1
    5. At end tally the category affinity scores by minute and by hour

{"id": 4464085, "category": "dining-nightlife", "sub_category": "restaurants", "title": "60% off at Shewaber Restaurant and Lounge", "description": "<p>The menu at Shewaber Restaurant and Lounge features a wide array of great selections, made from only the freshest and highest quality ingredients, with something sure to please every member of your group. Shewaber Restaurant and Lounge has established itself as one of the area's favorite culinary destinations and is sure to offer you a pleasant and unique dining experience every time you visit. Please stop in soon!</p>", "fine_print": "Minimum purchase amounts and other restrictions may apply. See the deal for additional information. Restaurant.com Terms and Conditions apply for all purchases; for Restaurant.com's terms and conditions please see here http://www.restaurant.com/about/terms.", "number_sold": 0, "url": "https://www.groupon.com/deals/shewaber-restaurant-and-lounge-1", "price": 4.0, "discount_percentage": 0.6, "provider_name": "Groupon", "online": false, "expires_at": "2039-06-24T23:59:59Z", "created_at": "2016-01-05T14:38:15Z", "updated_at": "2016-01-10T20:27:05Z", "merchant_id": 987569}

insert into deals.trending_categories_by_time (category, count, datetime) values ('Coffee', 1925, now());
insert into deals.trending_categories_by_time (category, count, datetime) values ('Restaurant', 1925, now());
insert into deals.trending_categories_by_time (category, count, datetime) values ('Spa', 1025, now());
insert into deals.trending_categories_by_time (category, count, datetime) values ('Tea', 895, now());
insert into deals.trending_categories_by_time (category, count, datetime) values ('Cane', 2865, now());

requirements
    - time_uuid
    - pykafka
    - cassandra-driver
    - kafka-python